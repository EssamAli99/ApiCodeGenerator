using Microsoft.EntityFrameworkCore;
using {{ ApiName }}.Data;
using {{ ApiName }}.Data.Repositories;
using {{ ApiName }}.Services;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using FluentValidation.AspNetCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers()
    .AddFluentValidation(fv => fv.RegisterValidatorsFromAssemblyContaining<Program>()); 

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "{{ ApiName }} API", Version = "v1" });

    {{ if AuthenticationType == "JWT" }}
    // Add JWT Bearer Authentication
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme.",
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
    {{ end }}
     {{ if AuthenticationType == "OAuth 2.0" }}
     c.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme
            {
                Type = SecuritySchemeType.OAuth2,
                Flows = new OpenApiOAuthFlows
                {
                    AuthorizationCode = new OpenApiOAuthFlow
                    {
                        AuthorizationUrl = new Uri("{{ OAuth2:AuthorizationUrl }}"),
                        TokenUrl = new Uri("{{ OAuth2:TokenUrl }}"),
                        Scopes = new Dictionary<string, string>
                        {
                            { "{{ OAuth2:Scope }}", "{{ ApiName }} API" }
                        }
                    }
                }
            });
            c.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "oauth2" }
                    },
                    new[] { "{{ OAuth2:Scope }}" }
                }
            });
        {{ end }}
});

// Configure DbContext
builder.Services.AddDbContext<{{ ApiName }}DbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register Repositories
builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

{{ if AuthenticationType == "JWT" }}
    // Add Authentication
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = builder.Configuration["Jwt:Issuer"],
                ValidAudience = builder.Configuration["Jwt:Audience"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
            };
        });

    // Add Authorization
    builder.Services.AddAuthorization();
{{ else if AuthenticationType == "API Keys" }}
    builder.Services.AddScoped<ApiKeyAuthFilter>();
    builder.Services.AddAuthentication("ApiKey")
        .AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>("ApiKey", options =>
        {
            options.KeyName = "X-API-Key"; // Customize the header name if needed
        });
{{ else if AuthenticationType == "OAuth 2.0" }}
        builder.Services.AddAuthentication(options =>
        {
            options.DefaultScheme = OpenIdConnectDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
        })
        .AddOpenIdConnect(options =>
        {
            options.Authority = builder.Configuration["OAuth2:Authority"]; // Replace with your provider's authority
            options.ClientId = builder.Configuration["OAuth2:ClientId"]; // Replace with your client ID
            options.ClientSecret = builder.Configuration["OAuth2:ClientSecret"]; // Replace with your client secret
            options.ResponseType = "code";
            options.SaveTokens = true;
            options.GetClaimsFromUserInfoEndpoint = true;
            options.Scope.Add(builder.Configuration["OAuth2:Scope"]);

            options.TokenValidationParameters = new TokenValidationParameters
            {
                NameClaimType = "name",
                RoleClaimType = "role",
                ValidateIssuer = false
            };
        });

    builder.Services.AddAuthorization(options =>
    {
        options.FallbackPolicy = options.DefaultPolicy;
    });
{{ end }}

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{ ApiName }} API V1");

        {{ if AuthenticationType == "JWT" }}
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{ ApiName }} API V1");
        c.EnableFilter(); // Enable authentication/authorization filters in Swagger UI
        {{ end }}
         {{ if AuthenticationType == "OAuth 2.0" }}
            c.OAuthClientId(builder.Configuration["OAuth2:ClientId"]);
            c.OAuthScopes(builder.Configuration["OAuth2:Scope"]);
            c.OAuthUsePkce();
        {{ end }}
    });
}

app.UseHttpsRedirection();

{{ if AuthenticationType == "JWT" }}
    app.UseAuthentication();
    app.UseAuthorization();
{{ else }}
    app.UseAuthentication();
    app.UseAuthorization(); // Keep this, even if no auth, for potential future use
{{ end }}

app.MapControllers();

app.Run();