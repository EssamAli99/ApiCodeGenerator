using Microsoft.EntityFrameworkCore;
using {{ ApiName }}.Data;
using {{ ApiName }}.Data.Repositories;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "{{ ApiName }} API", Version = "v1" });

    {{ if AuthenticationType == "JWT" }}
    // Add JWT Bearer Authentication
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme.",
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
    {{ end }}
});

// Configure DbContext
builder.Services.AddDbContext<{{ ApiName }}DbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register Repositories
builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

{{ if AuthenticationType == "JWT" }}
    // Add Authentication
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = builder.Configuration["Jwt:Issuer"],
                ValidAudience = builder.Configuration["Jwt:Audience"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
            };
        });

    // Add Authorization
    builder.Services.AddAuthorization();
{{ else if AuthenticationType == "API Keys" }}
    // API Keys Authentication Logic Here
    // (Implementation details depend on your API Key strategy)
{{ else if AuthenticationType == "OAuth 2.0" }}
    // OAuth 2.0 Authentication Logic Here
    // (Implementation details depend on your OAuth 2.0 provider)
{{ end }}

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{ ApiName }} API V1");

        {{ if AuthenticationType == "JWT" }}
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "{{ ApiName }} API V1");
        c.EnableFilter(); // Enable authentication/authorization filters in Swagger UI
        {{ end }}
    });
}

app.UseHttpsRedirection();

{{ if AuthenticationType == "JWT" }}
    app.UseAuthentication();
    app.UseAuthorization();
{{ else }}
    app.UseAuthorization(); // Keep this, even if no auth, for potential future use
{{ end }}

app.MapControllers();

app.Run();