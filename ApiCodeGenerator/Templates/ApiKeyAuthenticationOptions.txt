// ApiKeyAuthenticationOptions.cs
using Microsoft.AspNetCore.Authentication;
// ApiKeyAuthenticationHandler.cs
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Security.Claims;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
namespace <#= ApiName #>.Services
{
    public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions
    {
        public string KeyName { get; set; } = "X-API-Key";
    }


    public class ApiKeyAuthenticationHandler : AuthenticationHandler<ApiKeyAuthenticationOptions>
    {
        public ApiKeyAuthenticationHandler(
            IOptionsMonitor<ApiKeyAuthenticationOptions> options,
            ILoggerFactory logger,
            UrlEncoder encoder,
            ISystemClock clock) : base(options, logger, encoder, clock)
        {
        }

        protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
        {
            if (!Request.Headers.ContainsKey(Options.KeyName))
            {
                return AuthenticateResult.Fail("Missing API Key");
            }

            string apiKey = Request.Headers[Options.KeyName];

            if (!ValidateApiKey(apiKey)) // Implement your API Key validation logic
            {
                return AuthenticateResult.Fail("Invalid API Key");
            }

            var claims = new[] { new Claim(ClaimTypes.Name, "ApiKeyUser") }; // Customize claims as needed
            var identity = new ClaimsIdentity(claims, Scheme.Name);
            var principal = new ClaimsPrincipal(identity);
            var ticket = new AuthenticationTicket(principal, Scheme.Name);

            return AuthenticateResult.Success(ticket);
        }

        private bool ValidateApiKey(string apiKey)
        {
            // Implement your API Key validation logic here
            // This could involve checking against a database or configuration file
            return apiKey == "YOUR_HARDCODED_API_KEY"; // Replace with your actual validation logic
        }
    }
}