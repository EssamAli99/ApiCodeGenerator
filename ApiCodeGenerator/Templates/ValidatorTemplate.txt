using FluentValidation;
using {{ ApiName }}.Entities;

namespace {{ ApiName }}.Validation
{
    public class {{ EntityName }}Validator : AbstractValidator<{{ EntityName }}>
    {
        public {{ EntityName }}Validator()
        {
            {{ for property in Properties }}
            //{{ property.property_name }}
            {{ if property.required == true }}
            RuleFor(x => x.{{ property.property_name }}).NotEmpty().WithMessage("{{ property.property_name }} is required.");
            {{ end }}
            {{ if property.max_length != null }}
            RuleFor(x => x.{{ property.property_name }}).MaximumLength({{ property.max_length }}).WithMessage("{{ property.property_name }} must not exceed {{ property.max_length }} characters.");
            {{ end }}
            {{ if property.min_length != null }}
            RuleFor(x => x.{{ property.property_name }}).MinimumLength({{ property.min_length }}).WithMessage("{{ property.property_name }} must be at least {{ property.min_length }} characters.");
            {{ end }}
            {{ if property.email_address == true }}
            RuleFor(x => x.{{ property.property_name }}).EmailAddress().WithMessage("{{ property.property_name }} is not a valid email address.");
            {{ end }}
            {{ if property.range != null }}
            RuleFor(x => x.{{ property.property_name }}).InclusiveBetween({{ property.range_min }}, {{ property.range_max }}).WithMessage("{{ property.property_name }} must be between {{ property.range_min }} and {{ property.range_max }}.");
            {{ end }}
            {{ if property.regex_pattern != "" }}
            RuleFor(x => x.{{ property.property_name }}).Matches("{{ property.RegexPattern }}").WithMessage("{{ property.property_name }} is not in the correct format.");
            {{ end }}
            {{ end }}
        }
    }
}